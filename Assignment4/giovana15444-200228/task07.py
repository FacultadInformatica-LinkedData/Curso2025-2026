# -*- coding: utf-8 -*-
"""Task07_2025.ipynb

Automatically generated by Colab.


**Task 07: Querying RDF(s)**
"""

# !pip install rdflib
# !wget https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()




"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a dictionary of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

result = []  # list of tuples (class, superclass)
classes = set(g.subjects(RDF.type, RDFS.Class))
for c in g.subjects(RDFS.subClassOf, None):
  classes.add(c)

for c in sorted(classes, key=lambda x: str(x)):
  supers = list(g.objects(c, RDFS.subClassOf))
  if supers:
    for sc in supers:
      result.append((c, sc))
  else:
    result.append((c, None))

# TO DO
# Visualize the results

for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)




"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query =  """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?c ?sc
WHERE {
  {
    ?c rdfs:subClassOf ?sc .
  }
  UNION
  {
    ?c a rdfs:Class .
    FILTER NOT EXISTS { ?c rdfs:subClassOf ?any . }
  }
}
"""

for r in g.query(query):
  print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)




"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual labels in a dictionary called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")

# variable to return
individuals = []

for s in g.subjects(RDF.type, ns.Person):
  labels = list(g.objects(s, RDFS.label))
  if labels:
    for l in labels:
      individuals.append(str(l))
  else:
    individuals.append(str(s).split("/")[-1])

# visualize results
for i in individuals:
  print(i)

# validation. Do not remove
report.validate_07_02a(individuals)




"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query =  """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ontology: <http://oeg.fi.upm.es/def/people#>
SELECT ?ind
WHERE {
  ?ind rdf:type ontology:Person .
}
"""

for r in g.query(query):
  print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query)




"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

query =  """
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ontology: <http://oeg.fi.upm.es/def/people#>
PREFIX person: <http://oeg.fi.upm.es/resource/person/>

SELECT ?name ?type
WHERE {
  ?x ontology:knows person:Rocky .
  OPTIONAL { ?x rdfs:label ?name . }
  OPTIONAL { ?x rdf:type ?type . }
}
"""

# TO DO
# Visualize the results
for r in g.query(query):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query =  """
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ontology: <http://oeg.fi.upm.es/def/people#>

SELECT DISTINCT ?name
WHERE {
  {
    ?x ontology:hasColleague ?c .
    ?c rdf:type ontology:Dog .
  }
  UNION
  {
    ?x ontology:hasColleague ?z .
    ?z ontology:hasColleague ?y .
    ?y rdf:type ontology:Dog .
  }
  OPTIONAL { ?x rdfs:label ?name . }
}
"""


for r in g.query(query):
  print(r.name)

# TO DO
# Visualize the results

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")
